Return-Path: <linux-btrfs-owner@vger.kernel.org>
X-Original-To: lists+linux-btrfs@lfdr.de
Delivered-To: lists+linux-btrfs@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 2D0174AA7C1
	for <lists+linux-btrfs@lfdr.de>; Sat,  5 Feb 2022 09:56:09 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1354901AbiBEI4H (ORCPT <rfc822;lists+linux-btrfs@lfdr.de>);
        Sat, 5 Feb 2022 03:56:07 -0500
Received: from smtp-out1.suse.de ([195.135.220.28]:45040 "EHLO
        smtp-out1.suse.de" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S232461AbiBEI4H (ORCPT
        <rfc822;linux-btrfs@vger.kernel.org>); Sat, 5 Feb 2022 03:56:07 -0500
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id E315E210EC
        for <linux-btrfs@vger.kernel.org>; Sat,  5 Feb 2022 08:56:05 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1644051365; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:
         mime-version:mime-version:  content-transfer-encoding:content-transfer-encoding;
        bh=r4FDenFZgXn7izhYT17WCCrS13RPik09gTHulmJoikY=;
        b=uY0eaX0oWe+mci0dLFpIFtAu4U2O84v/1SxpqDxoXO9LOBzX2d/pCOwbWlVDN1PA1Qcrha
        EzT2izU/rBpcuGE757xyFBs/tOCUlADKAJyYSNvzj95zQ7Ht5zpeVaMf2xpCIVOwM7brtj
        V/5JQ80NHoQm9kjHdwMm8IuTJbeE94U=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 41E0E13B24
        for <linux-btrfs@vger.kernel.org>; Sat,  5 Feb 2022 08:56:05 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id TyEaA6U7/mHSdQAAMHmgww
        (envelope-from <wqu@suse.com>)
        for <linux-btrfs@vger.kernel.org>; Sat, 05 Feb 2022 08:56:05 +0000
From:   Qu Wenruo <wqu@suse.com>
To:     linux-btrfs@vger.kernel.org
Subject: [PATCH] btrfs: populate extent_map::generation when reading from disk
Date:   Sat,  5 Feb 2022 16:55:47 +0800
Message-Id: <817e735ee9c225268f17bee906c871b1fd965c4f.1644051267.git.wqu@suse.com>
X-Mailer: git-send-email 2.35.0
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-btrfs.vger.kernel.org>
X-Mailing-List: linux-btrfs@vger.kernel.org

[WEIRD BEHAVIOR]

When btrfs_get_extent() tries to get some file extent from disk, it
never populates extent_map::generation , leaving the value to be 0.

On the other hand, for extent map generated by IO, it will get its
generation properly set at finish_ordered_io()

 finish_ordered_io()
 |- unpin_extent_cache(gen = trans->transid)
    |- em->generation = gen;

[REGRESSION?]
I have no idea when such behavior is introduced, but at least in v5.15
this incorrect behavior is already there.

[AFFECT]
Not really sure if there is any behavior really get affected.

Sure there are locations like extent map merging, but there is no value
smaller than 0 for u64, thus it won't really cause a difference.

For autodefrag, although it's checking em->generation to determine if we
need to defrag a range, but that @new_than value is always from IO, thus
all those extent maps with 0 generation will just be skipped, and that's
the expected behavior anyway.

For manual defrag, @newer_than is 0, and our check is to skip generation
smaller than @newer_than, thus it still makes no difference.

[FIX]
To make things less weird, let us populate extent_map::generation in
btrfs_extent_item_to_extent_map().

Signed-off-by: Qu Wenruo <wqu@suse.com>
---
 fs/btrfs/file-item.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/fs/btrfs/file-item.c b/fs/btrfs/file-item.c
index 90c5c38836ab..9a3de652ada8 100644
--- a/fs/btrfs/file-item.c
+++ b/fs/btrfs/file-item.c
@@ -1211,6 +1211,7 @@ void btrfs_extent_item_to_extent_map(struct btrfs_inode *inode,
 	extent_start = key.offset;
 	extent_end = btrfs_file_extent_end(path);
 	em->ram_bytes = btrfs_file_extent_ram_bytes(leaf, fi);
+	em->generation = btrfs_file_extent_generation(leaf, fi);
 	if (type == BTRFS_FILE_EXTENT_REG ||
 	    type == BTRFS_FILE_EXTENT_PREALLOC) {
 		em->start = extent_start;
-- 
2.35.0

