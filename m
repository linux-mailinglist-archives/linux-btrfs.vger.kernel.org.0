Return-Path: <linux-btrfs-owner@vger.kernel.org>
X-Original-To: lists+linux-btrfs@lfdr.de
Delivered-To: lists+linux-btrfs@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id ACFEE34D812
	for <lists+linux-btrfs@lfdr.de>; Mon, 29 Mar 2021 21:26:49 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231313AbhC2T0R (ORCPT <rfc822;lists+linux-btrfs@lfdr.de>);
        Mon, 29 Mar 2021 15:26:17 -0400
Received: from mail-out.m-online.net ([212.18.0.10]:49784 "EHLO
        mail-out.m-online.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231297AbhC2TZp (ORCPT
        <rfc822;linux-btrfs@vger.kernel.org>);
        Mon, 29 Mar 2021 15:25:45 -0400
Received: from frontend01.mail.m-online.net (unknown [192.168.8.182])
        by mail-out.m-online.net (Postfix) with ESMTP id 4F8MxM6Z3Vz1s1y9;
        Mon, 29 Mar 2021 21:25:43 +0200 (CEST)
Received: from localhost (dynscan1.mnet-online.de [192.168.6.70])
        by mail.m-online.net (Postfix) with ESMTP id 4F8MxM63fsz1r1MD;
        Mon, 29 Mar 2021 21:25:43 +0200 (CEST)
X-Virus-Scanned: amavisd-new at mnet-online.de
Received: from mail.mnet-online.de ([192.168.8.182])
        by localhost (dynscan1.mail.m-online.net [192.168.6.70]) (amavisd-new, port 10024)
        with ESMTP id JJvt_Y0IY6Ji; Mon, 29 Mar 2021 21:25:42 +0200 (CEST)
X-Auth-Info: sJ99pa1c0Wm0LDNWi6owxscMZGKwbxat7OOmGP9n7KU=
Received: from [10.88.0.186] (dslb-084-056-254-233.084.056.pools.vodafone-ip.de [84.56.254.233])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.mnet-online.de (Postfix) with ESMTPSA;
        Mon, 29 Mar 2021 21:25:42 +0200 (CEST)
Subject: Re: btrfs-send format that contains binary diffs
To:     Martin Raiber <martin@urbackup.org>,
        Henning Schild <henning.schild@siemens.com>,
        Andrei Borzenkov <arvidjaar@gmail.com>
Cc:     linux-btrfs@vger.kernel.org
References: <f3306b7c-a97a-21f2-0f66-dc94dc2c0272@denx.de>
 <db6fae67-6348-1de3-c953-a4c75c459b65@gmail.com>
 <20210329192506.52f352aa@md1za8fc.ad001.siemens.net>
 <010201787f24acd2-f4efde2d-c9f3-4911-90a9-3c366cb8c045-000000@eu-west-1.amazonses.com>
From:   Claudius Heine <ch@denx.de>
Organization: Denx Software Engineering
Message-ID: <0a060234-ca95-55de-0c6d-65f65a9c8511@denx.de>
Date:   Mon, 29 Mar 2021 21:25:40 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101
 Thunderbird/78.9.0
MIME-Version: 1.0
In-Reply-To: <010201787f24acd2-f4efde2d-c9f3-4911-90a9-3c366cb8c045-000000@eu-west-1.amazonses.com>
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: en-US
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-btrfs.vger.kernel.org>
X-Mailing-List: linux-btrfs@vger.kernel.org

Hi Martin,

On 2021-03-29 20:00, Martin Raiber wrote:
> On 29.03.2021 19:25 Henning Schild wrote:
>> Am Mon, 29 Mar 2021 19:30:34 +0300
>> schrieb Andrei Borzenkov <arvidjaar@gmail.com>:
>>
>>> On 29.03.2021 16:16, Claudius Heine wrote:
>>>> Hi,
>>>>
>>>> I am currently investigating the possibility to use `btrfs-stream`
>>>> files (generated by `btrfs send`) for deploying a image based
>>>> update to systems (probably embedded ones).
>>>>
>>>> One of the issues I encountered here is that btrfs-send does not
>>>> use any diff algorithm on files that have changed from one snapshot
>>>> to the next.
>>> btrfs send works on block level. It sends blocks that differ between
>>> two snapshots.
>>>
>>>> One way to implement this would be to add some sort of 'patch'
>>>> command to the `btrfs-stream` format.
>>>>    
>>> This would require reading complete content of both snapshots instead
>>> if just computing block diff using metadata. Unless I misunderstand
>>> what you mean.
>> On embedded systems it is common to update complete "firmware" images
>> as opposed to package based partial updates. You often have two root
>> filesystems to be able to always fall back to a working state in case
>> of any sort or error.
>>
>> Take the picture from
>> https://sbabic.github.io/swupdate/overview.html#double-copy
>>
>> and assume that "Application software" is a full blown OS with
>> everything that makes your device.
>>
>> That approach offers great "control" but unfortunately can also lead to
>> great downloads required for an update. The basic idea is to download
>> the binary-diff between the future and the current rootfs only.
>> Given a filesystem supports snapshots, it would be great to
>> "send/receive" them as diffs.
>>
>> Today most people that do such things with other fss script around with
>> xdelta etc. But btrfs is more "integrated", so when considering it for
>> such embedded usecases native support would most likely be better than
>> hacks on top.
>>
>> We have several use-cases in mind with btrfs.
>>   - ro-base with rw overlays
>>   - binary diff updates against such a ro-base
>>   - backup/restore with snapshots of certain subvolumes
>>   - factory reset with wiping certain submodules
>>
>> regards,
>> Henning
> 
> I think I know what you want to accomplish and I've been doing it for a while now. But I don't know what the problem with btrfs send is? Do you want to have non-block based diff to make updates smaller? Have you overwritten files completely and need to dedupe or reflink them before sending them? Theoretically the btrfs send format would be able to support something like bsdiff (non-block based diff -- it is just a set of e.g. write commands with offset and binary data or using reflink to copy data from one file to another), but there currently isn't a tool to create this.
> 
> How I've done it is:
> 
>   - Create a btrfs image with a rw sys_root_current subvol
>   - E.g. debootstrap a Linux system into it
>   - Create sys_root_v1 as ro snapshot of sys_root_current
> 
> Use that system image on different systems.
> 
> On update on the original image:
> 
>   - Modify sys_root_current
>   - Create ro snapshot sys_root_v2 of sys_root_current
>   - Create an btrfs send update that modifies sys_root_v1 to sys_root_v2: btrfs send -p sys_root_v1 sys_root_v2 | xz -c > update_v1.btrfs.xz
>   - Publish update_v1.btrfs.xz
> 
> On the systems:
> 
>   - Download update_v1.btrfs.xz (verify signature)
>   - Create sys_root_v2 by applying differences to sys_root_v1: cat update_v1.btrfs.xz | xz -d -c | btrfs receive /rootfs
>   - Rename (exchange) sys_root_current to sys_root_last
>   - Create rw snapshot of sys_root_v2 as sys_root_current
>   - Reboot into new system

That is mostly the approach we have envisioned. However we also wanted 
to add the possibility of allowing binary deltas for smaller blobs. 
(e.g. <60MiB). Because competing mechanisms, that use different 
mechanisms are based on different file systems like os-tree, or zchunk 
allow smaller update sizes, by using similar mechanisms.

Os-tree for instance allows to calculate static deltas [1] in order to 
make the download size of the update smaller. However, currently you 
cannot really use OS-tree to apply those completely offline.

zchunk allows to split a big image into smaller chunks, and then only 
the chunks that changed need to be fetched [2]. Again, not really 
possible offline.

regards,
Claudius

[1] 
https://ostreedev.github.io/ostree/repository-management/#derived-data---static-deltas-and-the-summary-file
[2] https://github.com/zchunk/zchunk
